<div id="mapsearchregions">
  <div style="margin-top: 10px;">
    <select class="sel_mapsearch" id="sel_regions" name="sel_regions">
      <option value="" selected="selected">-- Régions --</option>
    </select>

    <select class="sel_mapsearch" id="sel_villes" name="sel_villes">
      <option value="" selected="selected">-- Villes --</option>
    </select>

    <select class="sel_mapsearch" id="sel_vallees" name="sel_vallees">
      <option value="" selected="selected">-- Vallées --</option>
    </select>

    <select class="sel_mapsearch" id="sel_chaines_montagnes" name="sel_chaines_montagnes">
      <option value="" selected="selected">-- Chaînes montagneuses --</option>
    </select>

    <select class="sel_mapsearch" id="sel_cols" name="sel_cols">
      <option value="" selected="selected">-- Cols --</option>
    </select>
    <select class="sel_mapsearch" id="sel_montagnes" name="sel_montagnes">
      <option value="" selected="selected">-- Montagnes --</option>
    </select>

    <select class="sel_mapsearch" id="sel_lacs" name="sel_lacs">
      <option value="" selected="selected">-- Lacs --</option>
    </select>

    <select class="sel_mapsearch" id="sel_cours_eau" name="sel_cours_eau">
      <option value="" selected="selected">-- Cours d'eau --</option>
    </select>

    <select class="sel_mapsearch" id="sel_cascades" name="sel_cascades">
      <option value="" selected="selected">-- Cascades --</option>
    </select>

    <select class="sel_mapsearch" id="sel_glaciers" name="sel_glaciers">
      <option value="" selected="selected">-- Glaciers --</option>
    </select><br>

    <select id="sel_ouvrage_map" name="sel_ouvrage">
      <option value="" selected="selected">Sélectionner un ouvrage</option>
    </select>

  </div>
</div>

<div id="map-wrapper">
  <div id="map"></div>
  <div id="infobox"></div>
</div>

<div id="map-outer" style="margin-top: 10px;">
  <div style="float: left;">
    <%= image_tag("attention-13px.gif", alt: "Attention") %>
  </div>

  <p style="color: #2e2e2a; margin-left: 22px;">
    La géolocalisation exacte de toutes les images n'est pas certifiée<br>
    Les images non géolocalisées n'apparaissent pas dans ce mode de recherche
  </p>
  <hr id="map-outer-border">
</div>

<script type="text/javascript">
const M = {}

const map = L.map("map", {
  center: [46.7265, 8.171],
  minZoom: 5,
  zoom: 8,
  zoomAnimation: true
})

M.map = map

M.map.on('click', () => {
  if (M.isMarkerEvent) {
    M.isMarkerEvent = false
    return
  }

  M.unselect()
})

M.layers = {
  topo: L.tileLayer(
    'https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {
      attribution: '&copy; <a href="http://www.esri.com">Esri</a>, HERE, Garmin, Intermap, increment P Corp., GEBCO, USGS, FAO, NPS, NRCAN, GeoBase, IGN, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), (c) OpenStreetMap contributors, and the GIS User Community'
    }
  ),
  img: L.tileLayer(
    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/t\ile/{z}/{y}/{x}', {
      attribution: '&copy; <a href="https://www.esri.com">Esri</a>, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
    }
  )
}

M.layers.topo.addTo(M.map)

M.data = <%= raw @pts_json %>

L.control.layers(
  {
    "Carte": M.layers.topo,
    "Photos aériennes": M.layers.img,
  },
  {},
  {
    position: 'topright'
  }
).addTo(M.map)

M.selectedPoint = null

M.select = function (pt) {
  // Unselect previous marker
  if (M.selectedPoint) M.unselect(false)

  M.selectedPoint = pt

  // Show infobox if it is not already displayed.
  const ibox = document.getElementById('infobox')
  const w = ibox.clientWidth

  const imgUrl = pt.i.replace('upload/viatimages', '/thumbs/viatimages/250x250/resize')

  let delay = 0

  if (w < 5) {
    ibox.style.marginLeft = '3px'
    ibox.style.width = '300px'
    ibox.style.padding = '16px'
    delay = 500
  }

  const pathParts = window.location.pathname.split('/')
  const lang = pathParts[2]

  const detailsUrl = `/viatimages/${lang}/images/${pt.id}`

  window.setTimeout(() => {
    ibox.innerHTML = `
      <p><a href="${detailsUrl}">${pt.t}</a></p>
      <a href="${detailsUrl}"><img src="${imgUrl}" /></a>
    `
    M.map.invalidateSize({ pan: false, debounceMoveend: true })
  }, delay)
  
  // Highlight the marker
  pt.marker.setRadius(10)
  pt.marker.setStyle({ fillColor: '#900', fillOpacity: 0.9 })
  pt.marker.bringToFront()

  // Make sure the clicked point is still visible.
  const markerRect = pt.marker.getElement().getBoundingClientRect()
  const mapRect = document.getElementById('map').getBoundingClientRect()
  const mapXMax = mapRect.left + 638

  const dx = mapXMax - markerRect.right
  if (dx < 0) {
    // We need to pan the map by at least dx pixels.
    M.map.panBy([Math.abs(dx) + 20, 0], { animate: true, duration: 0.5 })
  }
}

M.unselect = function (hideInfobox = true) {
  if (M.selectedPoint === null) return

  // Reset the marker style
  const pt = M.selectedPoint
  pt.marker.setRadius(6)
  pt.marker.setStyle({ fillColor: '#f00', fillOpacity: 0.7 })

  const ibox = document.getElementById('infobox')
  ibox.innerHTML = ''

  if (hideInfobox) {
    ibox.style.marginLeft = 0
    ibox.style.width = 0
    ibox.style.padding = 0
    window.setTimeout(() => {
      M.map.invalidateSize({ pan: false, debounceMoveend: true })
    }, 600)
  }

  M.selectedPoint = null
}

M.markerCluster = L.markerClusterGroup()

M.data.forEach(function (pt) {
  const m = L.circleMarker(
    [ pt.y, pt.x ],
    { radius: 6, color: '#fff', weight: 0.5, fillColor: '#f00', fillOpacity: 0.7 }
  )

  m.pt = pt

  m.on('click', evt => {
    M.isMarkerEvent = true
    M.select(evt.target.pt)
  })
  
  M.markerCluster.addLayer(m)
  //m.addTo(M.map)
  m.imageId = pt.id
  pt.marker = m
})

M.markerCluster.addTo(M.map)

</script>
